name: CI/CD Pipeline

on:
  push:
    branches: [ master ]


jobs:

  continuous-integration:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.10.2
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
#      - name: Run tests
#        run: |
#          source .venv/bin/activate
#          pytest tests/
#          coverage report
#
      # Step 7
      - name: Create Zipfile archive of Dependencies
        run: |
          cd .venv/Lib/site-packages
          zip -r9 ../../../../api.zip .

      # Step 8
      - name: Add App to Zip file
        run: cd ./app && zip -g ../api.zip -r .

      # Step 9
      - name: Upload zip file artifact
        uses: actions/upload-artifact@v2
        with:
          name: api
          path: api.zip
